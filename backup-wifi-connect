
// #include <Arduino.h>
#include <lvgl.h>
#include "display.h"
#include "esp_bsp.h"
#include "lv_port.h"
#include <esp_log.h>   // Add this line to include the header file that declares ESP_LOGI
#include <esp_flash.h> // Add this line to include the header file that declares esp_flash_t
#include <esp_chip_info.h>
#include <esp_system.h>
#include <esp_heap_caps.h>
#include <esp_wifi.h>
#include <esp_event.h>
#include <nvs_flash.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <freertos/event_groups.h>

static const char *TAG = "DEMO_LVGL";

// WiFi Configuration - HARDCODED
#define WIFI_SSID "Telecentro-4ddb"
#define WIFI_PASS "UMRMXJCZZA4A"
#define WIFI_MAXIMUM_RETRY 5

// Event group para WiFi
static EventGroupHandle_t s_wifi_event_group;
#define WIFI_CONNECTED_BIT BIT0
#define WIFI_FAIL_BIT BIT1

// Variables globales para UI
static lv_obj_t *status_label;
static lv_obj_t *signal_label;
static lv_obj_t *ip_label;
static lv_obj_t *connect_btn;
static int s_retry_num = 0;
static bool wifi_connected = false;

#define BUILD (String(__DATE__) + " - " + String(__TIME__)).c_str()

#define logSection(section) \
  ESP_LOGI(TAG, "\n\n************* %s **************\n", section);

/**
 * @brief LVGL porting example
 * Set the rotation degree:
 *      - 0: 0 degree
 *      - 90: 90 degree
 *      - 180: 180 degree
 *      - 270: 270 degree
 *
 */
#define LVGL_PORT_ROTATION_DEGREE (90)

/**
 * To use the built-in examples and demos of LVGL uncomment the includes below respectively.
 * You also need to copy `lvgl/examples` to `lvgl/src/examples`. Similarly for the demos `lvgl/demos` to `lvgl/src/demos`.
 */
// #include <demos/lv_demos.h>
// #include <examples/lv_examples.h>

void setup();

// Event handler para WiFi
static void event_handler(void *arg, esp_event_base_t event_base,
                          int32_t event_id, void *event_data)
{
  if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START)
  {
    esp_wifi_connect();
  }
  else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED)
  {
    if (s_retry_num < WIFI_MAXIMUM_RETRY)
    {
      esp_wifi_connect();
      s_retry_num++;
      ESP_LOGI(TAG, "retry to connect to the AP");
      lv_label_set_text(status_label, "Conectando...");
    }
    else
    {
      xEventGroupSetBits(s_wifi_event_group, WIFI_FAIL_BIT);
      lv_label_set_text(status_label, "Error: No se pudo conectar");
    }
    ESP_LOGI(TAG, "connect to the AP fail");
  }
  else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP)
  {
    ip_event_got_ip_t *event = (ip_event_got_ip_t *)event_data;
    ESP_LOGI(TAG, "got ip:" IPSTR, IP2STR(&event->ip_info.ip));
    s_retry_num = 0;
    wifi_connected = true;
    xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT);

    // Actualizar UI
    lv_label_set_text(status_label, "¡CONECTADO!");
    char ip_str[32];
    sprintf(ip_str, "IP: " IPSTR, IP2STR(&event->ip_info.ip));
    lv_label_set_text(ip_label, ip_str);
    lv_label_set_text(connect_btn, "Desconectar");
  }
}

// Inicializar WiFi
void wifi_init_sta(void)
{
  s_wifi_event_group = xEventGroupCreate();

  ESP_ERROR_CHECK(esp_netif_init());
  ESP_ERROR_CHECK(esp_event_loop_create_default());
  esp_netif_create_default_wifi_sta();

  wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
  ESP_ERROR_CHECK(esp_wifi_init(&cfg));

  esp_event_handler_instance_t instance_any_id;
  esp_event_handler_instance_t instance_got_ip;
  ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
                                                      ESP_EVENT_ANY_ID,
                                                      &event_handler,
                                                      NULL,
                                                      &instance_any_id));
  ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,
                                                      IP_EVENT_STA_GOT_IP,
                                                      &event_handler,
                                                      NULL,
                                                      &instance_got_ip));

  wifi_config_t wifi_config = {
      .sta = {
          .ssid = WIFI_SSID,
          .password = WIFI_PASS,
          .threshold.authmode = WIFI_AUTH_WPA2_PSK,
      },
  };
  ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
  ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));
  ESP_ERROR_CHECK(esp_wifi_start());

  ESP_LOGI(TAG, "wifi_init_sta finished.");
}

// Actualizar señal WiFi (simplificado)
void update_wifi_signal(void)
{
  if (wifi_connected)
  {
    wifi_ap_record_t ap_info;
    if (esp_wifi_sta_get_ap_info(&ap_info) == ESP_OK)
    {
      char signal_str[32];
      sprintf(signal_str, "Señal: %d dBm", ap_info.rssi);
      lv_label_set_text(signal_label, signal_str);
    }
  }
}

// Event handler para el botón
static void btn_event_handler(lv_event_t *e)
{
  lv_event_code_t code = lv_event_get_code(e);
  if (code == LV_EVENT_CLICKED)
  {
    if (wifi_connected)
    {
      esp_wifi_disconnect();
      wifi_connected = false;
      lv_label_set_text(status_label, "Desconectado");
      lv_label_set_text(signal_label, "---");
      lv_label_set_text(ip_label, "IP: ---");
      lv_label_set_text(connect_btn, "Conectar");
    }
    else
    {
      s_retry_num = 0;
      lv_label_set_text(status_label, "Conectando...");
      esp_wifi_connect();
    }
  }
}

#if !CONFIG_AUTOSTART_ARDUINO
void app_main()
{
  // initialize arduino library before we start the tasks
  // initArduino();

  setup();
}
#endif
void setup()
{
  logSection("ESP32 WiFi Manager con LVGL");

  // Inicializar NVS
  esp_err_t ret = nvs_flash_init();
  if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)
  {
    ESP_ERROR_CHECK(nvs_flash_erase());
    ret = nvs_flash_init();
  }
  ESP_ERROR_CHECK(ret);

  ESP_LOGI(TAG, "ESP32-S3 WiFi Manager Starting...");

  logSection("Initialize panel device");
  bsp_display_cfg_t cfg = {
      .lvgl_port_cfg = ESP_LVGL_PORT_INIT_CONFIG(),
      .buffer_size = EXAMPLE_LCD_QSPI_H_RES * EXAMPLE_LCD_QSPI_V_RES,
#if LVGL_PORT_ROTATION_DEGREE == 90
      .rotate = LV_DISP_ROT_90,
#elif LVGL_PORT_ROTATION_DEGREE == 270
      .rotate = LV_DISP_ROT_270,
#elif LVGL_PORT_ROTATION_DEGREE == 180
      .rotate = LV_DISP_ROT_180,
#elif LVGL_PORT_ROTATION_DEGREE == 0
      .rotate = LV_DISP_ROT_NONE,
#endif
  };

  bsp_display_start_with_config(&cfg);
  bsp_display_backlight_on();

  logSection("Create WiFi UI");
  /* Lock the mutex due to the LVGL APIs are not thread-safe */
  bsp_display_lock(0);

  // Título principal
  lv_obj_t *title = lv_label_create(lv_scr_act());
  lv_label_set_text(title, "ESP32 WiFi Manager");
  lv_obj_set_style_text_font(title, &lv_font_montserrat_20, 0);
  lv_obj_set_style_text_color(title, lv_color_hex(0x0000FF), 0);
  lv_obj_align(title, LV_ALIGN_TOP_MID, 0, 20);

  // SSID info
  lv_obj_t *ssid_label = lv_label_create(lv_scr_act());
  lv_label_set_text(ssid_label, "SSID: " WIFI_SSID);
  lv_obj_set_style_text_font(ssid_label, &lv_font_montserrat_14, 0);
  lv_obj_align(ssid_label, LV_ALIGN_TOP_MID, 0, 60);

  // Status
  status_label = lv_label_create(lv_scr_act());
  lv_label_set_text(status_label, "Desconectado");
  lv_obj_set_style_text_font(status_label, &lv_font_montserrat_16, 0);
  lv_obj_set_style_text_color(status_label, lv_color_hex(0xFF0000), 0);
  lv_obj_align(status_label, LV_ALIGN_CENTER, 0, -40);

  // Señal
  signal_label = lv_label_create(lv_scr_act());
  lv_label_set_text(signal_label, "Señal: ---");
  lv_obj_set_style_text_font(signal_label, &lv_font_montserrat_14, 0);
  lv_obj_align(signal_label, LV_ALIGN_CENTER, 0, -10);

  // IP
  ip_label = lv_label_create(lv_scr_act());
  lv_label_set_text(ip_label, "IP: ---");
  lv_obj_set_style_text_font(ip_label, &lv_font_montserrat_14, 0);
  lv_obj_align(ip_label, LV_ALIGN_CENTER, 0, 20);

  // Botón conectar
  lv_obj_t *btn = lv_btn_create(lv_scr_act());
  lv_obj_set_size(btn, 140, 50);
  lv_obj_align(btn, LV_ALIGN_BOTTOM_MID, 0, -30);
  lv_obj_add_event_cb(btn, btn_event_handler, LV_EVENT_CLICKED, NULL);

  connect_btn = lv_label_create(btn);
  lv_label_set_text(connect_btn, "Conectar");
  lv_obj_center(connect_btn);

  /* Release the mutex */
  bsp_display_unlock();

  // Inicializar WiFi
  logSection("Initialize WiFi");
  wifi_init_sta();

  logSection("WiFi Manager Ready");
}

void loop()
{
  ESP_LOGI(TAG, "IDLE loop");
  // delay(1000);
}